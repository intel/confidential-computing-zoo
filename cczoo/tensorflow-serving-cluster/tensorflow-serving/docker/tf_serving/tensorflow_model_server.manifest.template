# Path to the library OS
loader.entrypoint = "file:{{ gramine.libos }}"

libos.entrypoint = "tensorflow_model_server"

loader.log_level = "{{ log_level }}"
#
# # Read application arguments directly from the command line. Don't use this on production!
loader.insecure__use_cmdline_argv = true
# loader.insecure__use_host_env = true

#
# # Environment variables for Python
loader.env.LD_LIBRARY_PATH = "{{ python.stdlib }}/lib:/lib:{{ arch_libdir }}:/usr/lib:/usr/{{ arch_libdir }}:./"
#
# # Allow for injecting SIGTERM signal from the host.
sys.enable_sigterm_injection = true
#
fs.mounts = [
  { path = "/lib", uri = "file:{{ gramine.runtimedir() }}" },
  { path = "{{ arch_libdir }}", uri = "file:{{ arch_libdir }}" },
  { path = "/usr{{ arch_libdir }}", uri = "file:/usr{{ arch_libdir }}" },
  { path = "/etc", uri = "file:/etc" },
  { path = "{{ python.stdlib }}", uri = "file:{{ python.stdlib }}" },
  { path = "{{ python.distlib }}", uri = "file:{{ python.distlib }}" },
  { path = "/models/resnet50-v15-fp32/1/saved_model.pb", uri = "file:models/resnet50-v15-fp32/1/saved_model.pb", type = "encrypted" },
  { path = "/ssl.cfg", uri = "file:ssl.cfg", type = "encrypted" }
]

sgx.enclave_size = "4G"
#
# # Gramine creates stacks of 256KB by default. It is not enough for SciPy/NumPy
# # packages, e.g., libopenblas dependency assumes more than 512KB-sized stacks.
sys.stack.size = "4M"
#
# # Set the maximum number of enclave threads. For SGX v1, the number of enclave
# # TCSes must be specified during signing, so the application cannot use more
# # threads than the number of TCSes. Note that Gramine also creates an internal
# # thread for handling inter-process communication (IPC), and potentially another
# # thread for asynchronous events. Therefore, the actual number of threads that
# # the application can create is (sgx.thread_num - 2).
sgx.thread_num = 400

sgx.nonpie_binary = true

loader.pal_internal_mem_size = "200M"

sgx.ra_client_spid = ""

# SGX Attestation
sgx.remote_attestation = "{{ ra_type }}"
loader.env.LD_PRELOAD = "libsecret_prov_attest.so"
loader.env.SECRET_PROVISION_CONSTRUCTOR = "1"
loader.env.SECRET_PROVISION_SET_KEY = "default"
loader.env.SECRET_PROVISION_CA_CHAIN_PATH = "ssl/ca.crt"
loader.env.SECRET_PROVISION_SERVERS = "attestation.service.com:4433"

sgx.trusted_files = [
  "file:{{ gramine.libos }}",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ python.distlib }}/",
  "file:libstdc++.so.6",
  "file:libgcc_s.so.1",
  "file:/usr/lib/x86_64-linux-gnu/",
  "file:/lib/x86_64-linux-gnu/",
  "file:/lib/x86_64-linux-gnu/libgcc_s.so.1",
  "file:/lib/x86_64-linux-gnu/libz.so.1",
  "file:/lib/x86_64-linux-gnu/libcom_err.so.2",
  "file:/lib/x86_64-linux-gnu/libkeyutils.so.1",
  "file:libsecret_prov_attest.so",
  "file:ssl/ca.crt",
  "file:tensorflow_model_server"
]


sgx.allowed_files = [
  "file:/etc/nsswitch.conf",
  "file:/etc/ethers",
  "file:/etc/hosts",
  "file:/etc/group",
  "file:/etc/passwd",
  "file:/etc/gai.conf",
  "file:/etc/host.conf",
  "file:/etc/resolv.conf",
  "file:/tmp"
]
