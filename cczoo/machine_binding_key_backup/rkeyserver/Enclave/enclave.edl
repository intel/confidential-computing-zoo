/*
 *
 * Copyright (c) 2022 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

enclave {
    from "sgx_tkey_exchange.edl" import *;

    include "sgx_key_exchange.h"
    include "sgx_quote.h"
    include "sgx_trts.h"
    include "stdbool.h"

    untrusted {
        void ocall_print_string([in, string] const char *str);
        int ocall_read_domain_key([out, size=cipher_dk_len] uint8_t* cipher_dk, uint32_t cipher_dk_len);
        int ocall_store_domain_key([in, size=cipher_dk_len] uint8_t* cipher_dk, uint32_t cipher_dk_len);
    };

    trusted {
        public sgx_status_t sgx_wrap_domain_key([in] sgx_aes_gcm_128bit_key_t *p_key,
                                                [out, size=p_dst_len] uint8_t *p_dst, size_t p_dst_len,
                                                [out] sgx_aes_gcm_128bit_tag_t *p_out_mac);

        /* Interfaces for remote attestation */
        public sgx_status_t enclave_init_ra(int b_pse,
                                            [out] sgx_ra_context_t *p_context);

        public sgx_status_t enclave_ra_close(sgx_ra_context_t context);

        public sgx_status_t enclave_verify_att_result_mac(sgx_ra_context_t context,
                                                          [in,size=message_size] uint8_t* message, size_t message_size,
                                                          [in,size=mac_size] uint8_t* mac, size_t mac_size);

        public sgx_status_t enclave_store_domainkey(sgx_ra_context_t context,
                                                    [in,size=secret_size] uint8_t* p_secret, uint32_t secret_size,
                                                    [in,count=16] uint8_t* gcm_mac);
    };
};
